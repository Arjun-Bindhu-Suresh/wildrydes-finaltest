
AWSTemplateFormatVersion: '2010-09-09'
Description: Arjun's Final Test - Deploy ECS Fargate App with CI/CD and Monitoring

Parameters:
  GitHubOwner:
    Type: String
    Default: arjun-github-username
  GitHubRepo:
    Type: String
    Default: wildrydes-finaltest
  GitHubBranch:
    Type: String
    Default: main
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

Resources:
  ArjunVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: arjun-vpc

  ArjunPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ArjunVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: arjun-public-subnet-1

  ArjunPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ArjunVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: arjun-public-subnet-2

  ArjunALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref ArjunVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'

  ArjunALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: arjun-alb-finaltest
      Subnets:
        - !Ref ArjunPublicSubnet1
        - !Ref ArjunPublicSubnet2
      SecurityGroups:
        - !Ref ArjunALBSecurityGroup
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  ArjunALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: arjun-alb-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref ArjunVPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200

  ArjunALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ArjunALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ArjunALBTargetGroup

  ArjunAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Tasks
      VpcId: !Ref ArjunVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: arjun-app-sg

  ArjunECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: arjun-cluster-finaltest

  ArjunTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ArjunECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: arjun-ecs-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ArjunTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: arjun-app
          Image: 445567116039.dkr.ecr.us-east-1.amazonaws.com/arjun-app-repo:latest
          PortMappings:
            - ContainerPort: 5000
          Essential: true

  ArjunECSService:
    Type: AWS::ECS::Service
    DependsOn: ArjunALBListener
    Properties:
      Cluster: !Ref ArjunECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref ArjunPublicSubnet1
            - !Ref ArjunPublicSubnet2
          SecurityGroups:
            - !Ref ArjunAppSecurityGroup
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: arjun-app
          ContainerPort: 5000
          TargetGroupArn: !Ref ArjunALBTargetGroup
      TaskDefinition: !Ref ArjunECSTaskDefinition

  ArjunCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: arjun-codebuild-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess

  ArjunCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: arjun-codebuild-project
      ServiceRole: !GetAtt ArjunCodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml

  ArjunCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: arjun-codepipeline-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - ecs:*
                  - iam:PassRole
                  - cloudwatch:*
                Resource: "*"

  ArjunCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: arjun-deploy-pipeline
      RoleArn: !GetAtt ArjunCodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub "${AWS::StackName}-artifact-store"
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref ArjunCodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ClusterName: !Ref ArjunECSCluster
                ServiceName: !Ref ArjunECSService
                FileName: imagedefinitions.json
              RunOrder: 1


  ArjunECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: arjun-app-repo

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref ArjunVPC

  ECSClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref ArjunECSCluster

  ECRRepositoryUri:
    Description: "ECR Repo URI"
    Value: !Ref ArjunECRRepository

  LoadBalancerDNS:
    Description: "Public DNS of ALB"
    Value: !GetAtt ArjunALB.DNSName
